Concepts covered:

- Data Types: Integers, Floats, Booleans, Strings
- Operators: Arithmetic, Assignment, Comparison, Logical
- Built-In Functions, Type Conversion
- Whitespace and Style Guidelines

=====
Print Statements
print () - built-in function that displays input values as text in the output

=====

Arithmetic operators

+ Addition
- Subtraction
* Multiplication
/ Division
% Mod (the remainder after dividing)
** Exponentiation (note that ^ does not do this operation, as you might have seen in other languages)
// Divides and rounds down to the nearest integer
The usual order of mathematical operations holds in Python,
often referred to as PEMDAS: Parentheses, Exponents, Multiplication/Division, Addition/Subtraction.

=====
Variables:

mv_population = 74728

Here mv_population is a variable, which holds the value of 74728. 
This assigns the item on the right to the name on the left, which is actually a little different than mathematical equality,
as 74728 does not hold the value of mv_population.

In any case, whatever term is on the left side, is now a name for whatever value is on the right side. 
Once a value has been assigned to a variable name, you can access the value from the variable name.

=======
the following two are equivalent in terms of assignment:

x = 3
y = 4
z = 5
and

x, y, z = 3, 4, 5
However, the above isn't a great way to assign variables in most cases, because our variable names should be descriptive of the values they hold.

Besides writing variable names that are descriptive, there are a few things to watch out for when naming variables in Python.

1. Only use ordinary letters, numbers and underscores in your variable names. They can’t have spaces, and need to start with a letter or underscore.

2. You can’t use reserved words or built-in identifiers that have important purposes in Python.

3. Use all lowercase letters and underscores to separate words. This is called snake case,
====

Assignment Operators:
Symbol	Example	 Equivalent
=	x = 2	x = 2
+=	x += 2	x = x + 2
-=	x -= 2	x = x - 2

===
There are two Python data types that could be used for numeric values:

int - for integer values
float - for decimal or floating point values
You can create a value that follows the data type by using the following syntax:

x = int(4.7)   # x is now an integer 4
y = float(4)   # y is now a float of 4.0

You can check the type by using the type function:

>>> print(type(x))
int
>>> print(type(y))
float

Because the float, or approximation, for 0.1 is actually slightly more than 0.1, when we add several of them together we can see the difference between the mathematically correct answer and the one that Python creates.

>>> print(.1 + .1 + .1 == .3)
False

=====
Booleans, Comparison Operators, and Logical Operators
The bool data type holds one of the values True or False, which are often encoded as 1 or 0, respectively.

There are 6 comparison operators that are common to see in order to obtain a bool value:

Comparison Operators
Symbol Use Case	Bool	Operation
5 < 3	False	Less Than
5 > 3	True	Greater Than
3 <= 3	True	Less Than or Equal To
3 >= 5	False	Greater Than or Equal To
3 == 5	False	Equal To
3 != 5	True	Not Equal To
And there are three logical operators you need to be familiar with:

Logical Use	Bool	Operation
5 < 3 and 5 == 5	False	and - Evaluates if all provided statements are True
5 < 3 or 5 == 5	True	or - Evaluates if at least one of many statements is True
not 5 < 3	True	not - Flips the Bool Value

========

Strings
Strings in Python are shown as the variable type str. You can define a string with either double quotes " or single quotes '. If the string you are creating actually has one of these two values in it, then you need to be careful to ensure your code doesn't give an error.

>>> my_string = 'this is a string!'
>>> my_string2 = "this is also a string!!!"
You can also include a \ in your string to be able to include one of these quotes:

>>> this_string = 'Simon\'s skateboard is in the garage.'
>>> print(this_string)
Simon's skateboard is in the garage.

Unlike the other data types you have seen so far, you can also index into strings, but you will see more on this soon! For now, here is a small example. Notice Python uses 0 indexing - we will discuss this later in this lesson in detail.

>>> first_word[0]

H

>>> first_word[1]

e
The len() function
len() is a built-in Python function that returns the length of an object, like a string. The length of a string is the number of characters in the string. This will always be an integer.

There is an example above, but here's another one:

print(len("ababa") / len("ab"))
2.5
You know what the data types are for len("ababa") and len("ab"). Notice the data type of their resulting quotient here.

The data type is float, as it includes a value after the decimal separator.

=====

An important string method: format()
We will be using the format() string method a good bit in our future work in Python, and you will find it very valuable in your coding, especially with your print statements.

We can best illustrate how to use format() by looking at some examples:

Example 1 python print("Mohammed has {} balloons".format(27))

Example 1 Output bash Mohammed has 27 balloons

Example 2 python animal = "dog" action = "bite" print("Does your {} {}?".format(animal, action))

Example 2 Output py Does your dog bite?

Example 3 python maria_string = "Maria loves {} and {}" print(maria_string.format("math", "statistics"))

Example 3 Output bash Maria loves math and statistics

======

F-String Formatting
F-string, or "Formatted String Literals" is a method of string formatting introduced in Python 3.6. It optimizes and simplifies the process of including variables within a string.

Unlike the traditional methods (as shown above) where you need to use placeholders like %s and %d or the format() function, F-strings provide a concise and convenient way to embed expressions inside string literals, using curly brackets {}. The expressions will be replaced with their values when the string is evaluated.

Here are a couple of examples:

Example 1 - Using a Single Variable

name = "John"
print(f"Hello, {name}")
Example 1 Output bash Hello, John

Example 2 - Using Expressions within the f-string You can use complex expressions within the {}. Python will evaluate the expressions and replace them with their results.

a = 5
b = 3
print(f"The sum of {a} and {b} is {a+b}")
Example 2 Output py The sum of 5 and 3 is 8

Another important string method: split()
A helpful string method when working with strings is the .split method. This function or method returns a data container called a list that contains the words from the input string. We will be introducing you to the concept of lists in the next video.

The split method has two arguments (sep and maxsplit). The sep argument stands for "separator". It can be used to identify how the string should be split up (e.g., whitespace characters like space, tab, return, newline; specific punctuation (e.g., comma, dashes)). If the sep argument is not provided, the default separator is whitespace.

True to its name, the maxsplit argument provides the maximum number of splits. The argument gives maxsplit + 1 number of elements in the new list, with the remaining string being returned as the last element in the list. You can read more about these methods in the Python documentation too.

The syntax for the split method is: string.split(sep, maxsplit)

Here are some examples for the .split() method.

A basic split method
new_str = "The cow jumped over the moon."
new_str.split()
Output is:

['The', 'cow', 'jumped', 'over', 'the', 'moon.']
The separator is space, and the maxsplit argument is set to 3
new_str.split(' ', 3)
Output is:

['The', 'cow', 'jumped', 'over the moon.']

=======

Solution: String Methods Practice
Version 1
verse = "If you can keep your head when all about you\n  Are losing theirs and blaming it on you,\nIf you can trust yourself when all men doubt you,\n  But make allowance for their doubting too;\nIf you can wait and not be tired by waiting,\n  Or being lied about, don’t deal in lies,\nOr being hated, don’t give way to hating,\n  And yet don’t look too good, nor talk too wise:"
print(verse, "\n")

print("Verse has a length of {} characters.".format(len(verse)))
print("The first occurence of the word 'and' occurs at the {}th index.".format(verse.find('and')))
print("The last occurence of the word 'you' occurs at the {}th index.".format(verse.rfind('you')))
print("The word 'you' occurs {} times in the verse.".format(verse.count('you')))
Version 2
Here's another way you could write the print statements and get the same output. Recall that a string is an ordered datatype, and therefore, each item can be called by a location, and a location is each character.

verse = "If you can keep your head when all about you\n  Are losing theirs and blaming it on you,\nIf you can trust yourself when all men doubt you,\n  But make allowance for their doubting too;\nIf you can wait and not be tired by waiting,\n  Or being lied about, don’t deal in lies,\nOr being hated, don’t give way to hating,\n  And yet don’t look too good, nor talk too wise:"
print(verse, "\n")

message = "Verse has a length of {} characters.\nThe first occurence of the \
word 'and' occurs at the {}th index.\nThe last occurence of the word 'you' \
occurs at the {}th index.\nThe word 'you' occurs {} times in the verse."

length = len(verse)
first_idx = verse.find('and')
last_idx = verse.rfind('you')
count = verse.count('you')

print(message.format(length, first_idx, last_idx, count))
Output:
If you can keep your head when all about you
  Are losing theirs and blaming it on you,
If you can trust yourself when all men doubt you,
  But make allowance for their doubting too;
If you can wait and not be tired by waiting,
  Or being lied about, don’t deal in lies,
Or being hated, don’t give way to hating,
  And yet don’t look too good, nor talk too wise: 

Verse has a length of 362 characters.
The first occurence of the word 'and' occurs at the 65th index.
The last occurence of the word 'you' occurs at the 186th index.
The word 'you' occurs 8 times in the verse.
========

